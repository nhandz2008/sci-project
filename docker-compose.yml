services:
  db:
    image: postgres:17.5
    # restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "5432:5432"

  backend:
    build:
      context: ./backend
    # restart: always
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request,sys; sys.exit(0) if urllib.request.urlopen(\"http://localhost:8000/health\").status==200 else sys.exit(1)'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
    ports:
      - "8000:8000"

  frontend:
    build:
      context: ./frontend
      args:
        # Use host-exposed URL so browser clients can reach backend
        NEXT_PUBLIC_API_URL: http://localhost:8000
    environment:
      # Runtime override (also used by client-side code)
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NODE_ENV: production
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  app-db-data:
