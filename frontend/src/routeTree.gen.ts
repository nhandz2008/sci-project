/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as CompetitionsIndexRouteImport } from './routes/competitions/index'
import { Route as DashboardUsersRouteImport } from './routes/dashboard/users'
import { Route as DashboardProfileRouteImport } from './routes/dashboard/profile'
import { Route as DashboardCompetitionsRouteImport } from './routes/dashboard/competitions'
import { Route as CompetitionsCreateRouteImport } from './routes/competitions/create'
import { Route as CompetitionsCompetitionIdRouteImport } from './routes/competitions/$competitionId'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const CompetitionsIndexRoute = CompetitionsIndexRouteImport.update({
  id: '/competitions/',
  path: '/competitions/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardUsersRoute = DashboardUsersRouteImport.update({
  id: '/dashboard/users',
  path: '/dashboard/users',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardProfileRoute = DashboardProfileRouteImport.update({
  id: '/dashboard/profile',
  path: '/dashboard/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardCompetitionsRoute = DashboardCompetitionsRouteImport.update({
  id: '/dashboard/competitions',
  path: '/dashboard/competitions',
  getParentRoute: () => rootRouteImport,
} as any)
const CompetitionsCreateRoute = CompetitionsCreateRouteImport.update({
  id: '/competitions/create',
  path: '/competitions/create',
  getParentRoute: () => rootRouteImport,
} as any)
const CompetitionsCompetitionIdRoute =
  CompetitionsCompetitionIdRouteImport.update({
    id: '/competitions/$competitionId',
    path: '/competitions/$competitionId',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/competitions/$competitionId': typeof CompetitionsCompetitionIdRoute
  '/competitions/create': typeof CompetitionsCreateRoute
  '/dashboard/competitions': typeof DashboardCompetitionsRoute
  '/dashboard/profile': typeof DashboardProfileRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/competitions': typeof CompetitionsIndexRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/competitions/$competitionId': typeof CompetitionsCompetitionIdRoute
  '/competitions/create': typeof CompetitionsCreateRoute
  '/dashboard/competitions': typeof DashboardCompetitionsRoute
  '/dashboard/profile': typeof DashboardProfileRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/competitions': typeof CompetitionsIndexRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/competitions/$competitionId': typeof CompetitionsCompetitionIdRoute
  '/competitions/create': typeof CompetitionsCreateRoute
  '/dashboard/competitions': typeof DashboardCompetitionsRoute
  '/dashboard/profile': typeof DashboardProfileRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/competitions/': typeof CompetitionsIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/competitions/$competitionId'
    | '/competitions/create'
    | '/dashboard/competitions'
    | '/dashboard/profile'
    | '/dashboard/users'
    | '/competitions'
    | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/competitions/$competitionId'
    | '/competitions/create'
    | '/dashboard/competitions'
    | '/dashboard/profile'
    | '/dashboard/users'
    | '/competitions'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/competitions/$competitionId'
    | '/competitions/create'
    | '/dashboard/competitions'
    | '/dashboard/profile'
    | '/dashboard/users'
    | '/competitions/'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  CompetitionsCompetitionIdRoute: typeof CompetitionsCompetitionIdRoute
  CompetitionsCreateRoute: typeof CompetitionsCreateRoute
  DashboardCompetitionsRoute: typeof DashboardCompetitionsRoute
  DashboardProfileRoute: typeof DashboardProfileRoute
  DashboardUsersRoute: typeof DashboardUsersRoute
  CompetitionsIndexRoute: typeof CompetitionsIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/competitions/': {
      id: '/competitions/'
      path: '/competitions'
      fullPath: '/competitions'
      preLoaderRoute: typeof CompetitionsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/users': {
      id: '/dashboard/users'
      path: '/dashboard/users'
      fullPath: '/dashboard/users'
      preLoaderRoute: typeof DashboardUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/profile': {
      id: '/dashboard/profile'
      path: '/dashboard/profile'
      fullPath: '/dashboard/profile'
      preLoaderRoute: typeof DashboardProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/competitions': {
      id: '/dashboard/competitions'
      path: '/dashboard/competitions'
      fullPath: '/dashboard/competitions'
      preLoaderRoute: typeof DashboardCompetitionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/competitions/create': {
      id: '/competitions/create'
      path: '/competitions/create'
      fullPath: '/competitions/create'
      preLoaderRoute: typeof CompetitionsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/competitions/$competitionId': {
      id: '/competitions/$competitionId'
      path: '/competitions/$competitionId'
      fullPath: '/competitions/$competitionId'
      preLoaderRoute: typeof CompetitionsCompetitionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  CompetitionsCompetitionIdRoute: CompetitionsCompetitionIdRoute,
  CompetitionsCreateRoute: CompetitionsCreateRoute,
  DashboardCompetitionsRoute: DashboardCompetitionsRoute,
  DashboardProfileRoute: DashboardProfileRoute,
  DashboardUsersRoute: DashboardUsersRoute,
  CompetitionsIndexRoute: CompetitionsIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
