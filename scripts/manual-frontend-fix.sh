#!/bin/bash

# SCI Project Manual Frontend Fix Script
# This script provides step-by-step manual commands to fix npm ci hanging

echo "🔧 Manual Frontend Fix Instructions"
echo "=================================="
echo ""
echo "If the automated fix doesn't work, follow these steps manually:"
echo ""

echo "Step 1: Stop and remove the frontend container"
echo "docker-compose -f docker-compose.prod.local.yml stop frontend"
echo "docker-compose -f docker-compose.prod.local.yml rm -f frontend"
echo ""

echo "Step 2: Clear Docker build cache"
echo "docker builder prune -f"
echo ""

echo "Step 3: Create a simple Dockerfile that uses npm install instead of npm ci"
echo "cat > frontend/Dockerfile << 'EOF'"
echo "# Stage 0, build-stage"
echo "FROM node:20-alpine AS build-stage"
echo ""
echo "WORKDIR /app"
echo ""
echo "# Copy package files"
echo "COPY package*.json /app/"
echo ""
echo "# Use npm install with timeout"
echo "RUN npm config set registry https://registry.npmjs.org/ && \\"
echo "    npm install --network-timeout=300000"
echo ""
echo "# Copy source code"
echo "COPY ./ /app/"
echo ""
echo "# Build arguments"
echo "ARG VITE_API_URL"
echo "ENV VITE_API_URL=\${VITE_API_URL}"
echo ""
echo "# Build the application"
echo "RUN npm run build"
echo ""
echo "# Stage 1, nginx"
echo "FROM nginx:alpine"
echo ""
echo "# Copy built application"
echo "COPY --from=build-stage /app/dist/ /usr/share/nginx/html"
echo ""
echo "# Copy nginx configuration"
echo "COPY ./nginx.conf /etc/nginx/conf.d/default.conf"
echo ""
echo "# Expose port"
echo "EXPOSE 80"
echo ""
echo "# Start nginx"
echo "CMD [\"nginx\", \"-g\", \"daemon off;\"]"
echo "EOF"
echo ""

echo "Step 4: Build the frontend image"
echo "docker-compose -f docker-compose.prod.local.yml build --no-cache frontend"
echo ""

echo "Step 5: Start the frontend container"
echo "docker-compose -f docker-compose.prod.local.yml up -d frontend"
echo ""

echo "Step 6: Check the container status"
echo "docker-compose -f docker-compose.prod.local.yml ps frontend"
echo ""

echo "Step 7: Check logs if there are issues"
echo "docker-compose -f docker-compose.prod.local.yml logs frontend"
echo ""

echo "Alternative approaches if npm install still hangs:"
echo ""

echo "Option A: Use yarn instead of npm"
echo "Replace the RUN command in Dockerfile with:"
echo "RUN apk add --no-cache yarn && \\"
echo "    yarn config set registry https://registry.npmjs.org/ && \\"
echo "    yarn install --network-timeout 300000"
echo ""

echo "Option B: Use pnpm instead of npm"
echo "Replace the RUN command in Dockerfile with:"
echo "RUN npm install -g pnpm && \\"
echo "    pnpm config set registry https://registry.npmjs.org/ && \\"
echo "    pnpm install --network-timeout 300000"
echo ""

echo "Option C: Pre-download dependencies locally"
echo "1. Run 'cd frontend && npm ci' locally"
echo "2. Copy node_modules to Docker build context"
echo "3. Use 'COPY node_modules/ /app/node_modules/' in Dockerfile"
echo ""

echo "Option D: Use a different Node.js base image"
echo "Replace 'FROM node:20-alpine' with 'FROM node:18-alpine' or 'FROM node:16-alpine'"
echo ""

echo "🌐 After successful build, your application should be available at: http://44.212.21.255" 