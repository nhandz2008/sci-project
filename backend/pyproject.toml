[project]
name = "sci-backend"
version = "0.1.0"
description = "Science Competitions Insight Backend API"
requires-python = ">=3.10,<4.0"
dependencies = [
    "fastapi[standard]>=0.116.1",
    "python-multipart>=0.0.20",
    "email-validator>=2.2.0",
    "passlib[bcrypt]>=1.7.4",
    "bcrypt==4.0.1",
    "pydantic>=2.10.4",
    "pydantic-settings>=2.10.1",
    "alembic>=1.16.4",
    "psycopg2-binary>=2.9.9",
    "sqlmodel>=0.0.24",
    "python-jose[cryptography]>=3.3.0",
    "httpx>=0.28.1",
    "pillow>=11.1.0",
    "boto3>=1.35.92",
]

[tool.uv]
dev-dependencies = [
    "pytest>=8.4.1",
    "pytest-cov>=5.0.0",
    "mypy>=1.17.0",
    "ruff>=0.8.4",
    "pre-commit>=4.0.1",
    "types-passlib>=1.7.7.20240106",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]
disable_error_code = ["call-arg"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
